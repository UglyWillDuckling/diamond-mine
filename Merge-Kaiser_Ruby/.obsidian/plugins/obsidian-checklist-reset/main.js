/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var f=Object.prototype.hasOwnProperty;var w=(t,e)=>{for(var s in e)h(t,s,{get:e[s],enumerable:!0})},R=(t,e,s,c)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of x(e))!f.call(t,i)&&i!==s&&h(t,i,{get:()=>e[i],enumerable:!(c=m(e,i))||c.enumerable});return t};var S=t=>R(h({},"__esModule",{value:!0}),t);var v={};w(v,{ChecklistResetSettingTab:()=>l,default:()=>r});module.exports=S(v);var n=require("obsidian");function d(t,e){return t.replaceAll(e,"")}var T=" \\[[^ ]\\])",E=" \\[ \\])",C="^[ 	]*(> )*\\d*",A=["-","*","+","."];function y(t){if(!t||t==="")return;let e=t.match(new RegExp("^/(.*?)/([gimy]*)$"));return console.log({pattern:t,match:e}),e?new RegExp(e[1],e[2]):t}function k(t,{deleteTextOnReset:e},s="uncheck"){let c=s==="check"?"[x]":"[ ]",i=s==="check"?E:T,p=y(e);return t.split(`
`).map(o=>{let g=A.find(a=>{if(new RegExp(`${C}(\\${a}${i}`,"g").test(o))return a});if(g){let a=o;return p&&s==="uncheck"&&(a=d(o,p)),a.replace(new RegExp(`(\\${g}${i}`,"g"),`${g} ${c}`)}return o}).join(`
`)}var V={deleteTextOnReset:""};function u(t,e,s){let c=t.getViewData(),i=k(c,e,s);t.setViewData(i,!1),t.save()}var r=class extends n.Plugin{async loadSettings(){this.settings={...V,...await this.loadData()}}async saveSettings(){await this.saveData(this.settings)}async onload(){await this.loadSettings(),this.addSettingTab(new l(this.app,this)),this.addCommand({id:"checklist-reset",name:"Reset checklists",checkCallback:e=>{if(e)return!!this.app.workspace.getActiveViewOfType(n.MarkdownView);let s=this.app.workspace.getActiveViewOfType(n.MarkdownView);s&&u(s,this.settings,"uncheck")}}),this.addCommand({id:"checklist-check-all",name:"Check all",checkCallback:e=>{if(e)return!!this.app.workspace.getActiveViewOfType(n.MarkdownView);let s=this.app.workspace.getActiveViewOfType(n.MarkdownView);s&&u(s,this.settings,"check")}})}},l=class extends n.PluginSettingTab{constructor(e,s){super(e,s),this.plugin=s}display(){let{containerEl:e}=this;e.empty(),new n.Setting(e).setName("Delete text on reset").setDesc("A regex or string. When resetting a checklist item any text matching this will be deleted.").addText(s=>s.setPlaceholder("/ \u2705 \\d{4}-\\d{2}-\\d{2}.*/g").setValue(this.plugin.settings.deleteTextOnReset).onChange(async c=>{this.plugin.settings.deleteTextOnReset=c,await this.plugin.saveSettings()}))}};

/* nosourcemap */