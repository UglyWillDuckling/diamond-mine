/* THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the GitHub repository of this plugin. */

"use strict";var g=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var M=Object.prototype.hasOwnProperty;var j=(t,e)=>{for(var i in e)g(t,i,{get:e[i],enumerable:!0})},V=(t,e,i,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of H(e))!M.call(t,a)&&a!==i&&g(t,a,{get:()=>e[a],enumerable:!(o=G(e,a))||o.enumerable});return t};var D=t=>V(g({},"__esModule",{value:!0}),t);var W={};j(W,{default:()=>u});module.exports=D(W);var A=require("obsidian");var d=require("obsidian");function m(t){let e=[];return t.workspace.iterateRootLeaves(i=>{e.push(i)}),e}function x(t){let e=t.app.workspace.getLastOpenFiles(),i=t.app.workspace.getActiveViewOfType(d.FileView)?.file?.path,o=["md","png","pdf","jpeg","jpg"];for(let a of e){let n=t.app.vault.getFileByPath(a),r=n&&o.includes(n.extension);if(a!==i&&r)return n}return null}function b(t){let i=x(t),o=i?i.basename:"";o.length>30&&(o=o.slice(0,30)+"\u2026"),t.statusbar.setText(o)}function y(t){let e=x(t);if(!e){new d.Notice("No valid recent note exists.");return}let i=m(t.app);if(i.length===0){new d.Notice("No open tab.");return}let o=i.find(a=>a.view.file?.path===e.path);o?t.app.workspace.setActiveLeaf(o,{focus:!0}):t.app.workspace.getLeaf().openFile(e)}var l=require("obsidian");async function R(t){let e="";try{e=await t.vault.adapter.read(t.vault.configDir+"/bookmarks.json")}catch{return[]}return JSON.parse(e).items}async function S(t){return(t.internalPlugins.plugins.bookmarks?.instance?.getBookmarks()||await R(t)).reduce((o,a)=>(a.type==="file"&&a.path&&t.vault.getFileByPath(a.path)&&o.push(a.path),o),[]).sort((o,a)=>{let n=t.vault.getFileByPath(o),r=t.vault.getFileByPath(a);return!n||!r?0:r.stat.mtime-n.stat.mtime})}async function T(t){let e=(await S(t.app))[0];if(!e)return;let i=t.app.vault.getFileByPath(e);i&&await t.app.workspace.getLeaf().openFile(i)}async function B(t){let e=t.app,i=e.workspace.getActiveViewOfType(l.MarkdownView),o=i?.editor,a=i?.getState().mode,n=await S(e);if(n.length===0){new l.Notice("There are no bookmarked files.");return}let r="";if(o&&a==="source"?r=o.getSelection():a==="preview"&&(r=activeWindow?.getSelection()?.toString()||""),r){if((o?.listSelections().length||0)>1){new l.Notice("Multiple Selections are not supported.");return}let p=e.vault.getFileByPath(n[0]);if(!p){new l.Notice("There are no valid bookmarked files.");return}await e.vault.append(p,r+`
`),new l.Notice(`Appended to "${p.basename}":

"${r}"`)}else{let s=e.workspace.getActiveFile()?.path,C=(n.findIndex(E=>E===s)+1)%n.length,O=n[C]||"",h=e.vault.getFileByPath(O);if(!h){new l.Notice("There are no valid bookmarked files.");return}if(h.path===s){new l.Notice("Already at the sole starred file.");return}await e.workspace.getLeaf().openFile(h)}}function L(t){let{app:e,settings:i}=t,o=e.internalPlugins.plugins.bookmarks?.instance;!i.keepBookmarksSidebarSorted||!o||(o.items.sort((a,n)=>{if(!a.path&&!n.path)return 0;if(!a.path)return 1;if(!n.path)return-1;let r=e.vault.getFileByPath(a.path),s=e.vault.getFileByPath(n.path);return!r&&!s?0:r?s?s.stat.mtime-r.stat.mtime:-1:1}),o._onItemsChanged(!0))}var c=require("obsidian");function v(t,e){let i=t.app.workspace.getActiveFile();if(!i){new c.Notice("No file open.");return}if(!i.parent){new c.Notice("File has no parent folder.");return}let o=i.parent.children.filter(s=>s instanceof c.TFile&&s.extension==="md").sort((s,p)=>s.name<p.name?-1:1);if(o.length<2){new c.Notice("No other files in this folder to switch to.");return}let a=o.findIndex(s=>s.path===i.path),n=e==="next"?(a+1)%o.length:(a+o.length-1)%o.length,r=o[n];t.app.workspace.getLeaf().openFile(r)}var w=require("obsidian");function P(t){let e=t.app.workspace.getLeaf();if(!e)return;let i=m(t.app);if(i.length<2){new w.Notice("No other tabs to switch to.");return}let o=i.findIndex(r=>r.id===e.id);if(o===-1){new w.Notice("No active tab found.");return}let a=(o+1)%i.length,n=i[a];t.app.workspace.setActiveLeaf(n,{focus:!0})}var I=require("obsidian"),U=/https?:\/\/[^\s)"']+/;function N(t){let[e]=t.getValue().match(U)||[];if(!e){new I.Notice("No URL found in current file.");return}window.open(e)}var f=require("obsidian"),F={openLastModifiedBookmarkOnStartup:!1,keepBookmarksSidebarSorted:!1},k=class extends f.PluginSettingTab{plugin;constructor(e){super(e.app,e),this.plugin=e,this.containerEl.addClass(e.cssclass)}display(){let{containerEl:e}=this;e.empty();let i=this.plugin.settings;new f.Setting(e).setName("Startup: open last modified bookmark").setDesc("By default, Obsidian opens the most recent file on startup. Enable this to open the last modified bookmark instead.").addToggle(o=>o.setValue(i.openLastModifiedBookmarkOnStartup).onChange(async a=>{i.openLastModifiedBookmarkOnStartup=a,await this.plugin.saveSettings()})),new f.Setting(e).setName("Auto-sort items in bookmark sidebar by last modified time").setDesc("[\u{1F9EA} Experimental] This will make the order of bookmarks in the sidebar reflect the order the bookmark-cycling command will move through files. (Note that this feature only works for bookmarks that are not in a folder.)").addToggle(o=>o.setValue(i.keepBookmarksSidebarSorted).onChange(async a=>{i.keepBookmarksSidebarSorted=a,await this.plugin.saveSettings()}))}};var u=class extends A.Plugin{statusbar=this.addStatusBarItem();settings=F;cssclass=this.manifest.id;async onload(){console.info(this.manifest.name+" Plugin loaded."),await this.loadSettings(),this.addSettingTab(new k(this)),this.settings.openLastModifiedBookmarkOnStartup&&this.app.workspace.onLayoutReady(()=>T(this)),b(this),this.registerEvent(this.app.workspace.on("file-open",()=>b(this))),this.registerEvent(this.app.workspace.on("file-open",()=>L(this))),this.addCommand({id:"alternate-note",name:"Switch to alternate note",callback:()=>y(this)}),this.addCommand({id:"cycle-starred-notes",name:"Cycle bookmarked notes / send selection to last bookmark",callback:async()=>await B(this)}),this.addCommand({id:"cycle-tabs-across-splits",name:"Cycle tabs (across splits)",callback:()=>P(this)}),this.addCommand({id:"next-file-in-current-folder",name:"Next note in current folder",callback:()=>v(this,"next")}),this.addCommand({id:"previous-file-in-current-folder",name:"Previous note in current folder",callback:()=>v(this,"prev")}),this.addCommand({id:"open-first-url-in-file",name:"Open first url in file",editorCallback:e=>N(e)})}onunload(){console.info(this.manifest.name+" Plugin unloaded.")}async loadSettings(){this.settings=Object.assign({},F,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */