/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.pnpm/@leeoniya+ufuzzy@1.0.14/node_modules/@leeoniya/ufuzzy/dist/uFuzzy.cjs.js
var require_uFuzzy_cjs = __commonJS({
  "node_modules/.pnpm/@leeoniya+ufuzzy@1.0.14/node_modules/@leeoniya/ufuzzy/dist/uFuzzy.cjs.js"(exports, module2) {
    "use strict";
    var cmp = new Intl.Collator("en", { numeric: true, sensitivity: "base" }).compare;
    var inf = Infinity;
    var escapeRegExp = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    var EXACT_HERE = "eexxaacctt";
    var LATIN_UPPER = "A-Z";
    var LATIN_LOWER = "a-z";
    var swapAlpha = (str, upper, lower) => str.replace(LATIN_UPPER, upper).replace(LATIN_LOWER, lower);
    var OPTS = {
      // whether regexps use a /u unicode flag
      unicode: false,
      alpha: null,
      // term segmentation & punct/whitespace merging
      interSplit: "[^A-Za-z\\d']+",
      intraSplit: "[a-z][A-Z]",
      // intra bounds that will be used to increase lft1/rgt1 info counters
      intraBound: "[A-Za-z]\\d|\\d[A-Za-z]|[a-z][A-Z]",
      // inter-bounds mode
      // 2 = strict (will only match 'man' on whitepace and punct boundaries: Mega Man, Mega_Man, mega.man)
      // 1 = loose  (plus allowance for alpha-num and case-change boundaries: MegaMan, 0007man)
      // 0 = any    (will match 'man' as any substring: megamaniac)
      interLft: 0,
      interRgt: 0,
      // allowance between terms
      interChars: ".",
      interIns: inf,
      // allowance between chars in terms
      intraChars: "[a-z\\d']",
      // internally case-insensitive
      intraIns: null,
      intraContr: "'[a-z]{1,2}\\b",
      // multi-insert or single-error mode
      intraMode: 0,
      // single-error bounds for errors within terms, default requires exact first char
      intraSlice: [1, inf],
      // single-error tolerance toggles
      intraSub: null,
      intraTrn: null,
      intraDel: null,
      // can post-filter matches that are too far apart in distance or length
      // (since intraIns is between each char, it can accum to nonsense matches)
      intraFilt: (term, match, index) => true,
      // should this also accept WIP info?
      // final sorting fn
      sort: (info, haystack, needle) => {
        let {
          idx,
          chars,
          terms,
          interLft2,
          interLft1,
          //	interRgt2,
          //	interRgt1,
          start,
          intraIns,
          interIns
        } = info;
        return idx.map((v, i) => i).sort((ia, ib) => (
          // most contig chars matched
          chars[ib] - chars[ia] || // least char intra-fuzz (most contiguous)
          intraIns[ia] - intraIns[ib] || // most prefix bounds, boosted by full term matches
          terms[ib] + interLft2[ib] + 0.5 * interLft1[ib] - (terms[ia] + interLft2[ia] + 0.5 * interLft1[ia]) || // highest density of match (least span)
          //	span[ia] - span[ib] ||
          // highest density of match (least term inter-fuzz)
          interIns[ia] - interIns[ib] || // earliest start of match
          start[ia] - start[ib] || // alphabetic
          cmp(haystack[idx[ia]], haystack[idx[ib]])
        ));
      }
    };
    var lazyRepeat = (chars, limit) => limit == 0 ? "" : limit == 1 ? chars + "??" : limit == inf ? chars + "*?" : chars + `{0,${limit}}?`;
    var mode2Tpl = "(?:\\b|_)";
    function uFuzzy2(opts) {
      var _a;
      opts = Object.assign({}, OPTS, opts);
      let {
        unicode,
        interLft,
        interRgt,
        intraMode,
        intraSlice,
        intraIns,
        intraSub,
        intraTrn,
        intraDel,
        intraContr,
        intraSplit: _intraSplit,
        interSplit: _interSplit,
        intraBound: _intraBound,
        intraChars
      } = opts;
      intraIns != null ? intraIns : intraIns = intraMode;
      intraSub != null ? intraSub : intraSub = intraMode;
      intraTrn != null ? intraTrn : intraTrn = intraMode;
      intraDel != null ? intraDel : intraDel = intraMode;
      let alpha = (_a = opts.letters) != null ? _a : opts.alpha;
      if (alpha != null) {
        let upper = alpha.toLocaleUpperCase();
        let lower = alpha.toLocaleLowerCase();
        _interSplit = swapAlpha(_interSplit, upper, lower);
        _intraSplit = swapAlpha(_intraSplit, upper, lower);
        _intraBound = swapAlpha(_intraBound, upper, lower);
        intraChars = swapAlpha(intraChars, upper, lower);
        intraContr = swapAlpha(intraContr, upper, lower);
      }
      let uFlag = unicode ? "u" : "";
      const quotedAny = '".+?"';
      const EXACTS_RE = new RegExp(quotedAny, "gi" + uFlag);
      const NEGS_RE = new RegExp(`(?:\\s+|^)-(?:${intraChars}+|${quotedAny})`, "gi" + uFlag);
      let { intraRules } = opts;
      if (intraRules == null) {
        intraRules = (p) => {
          let _intraSlice = OPTS.intraSlice, _intraIns = 0, _intraSub = 0, _intraTrn = 0, _intraDel = 0;
          if (/[^\d]/.test(p)) {
            let plen = p.length;
            if (plen <= 4) {
              if (plen >= 3) {
                _intraTrn = Math.min(intraTrn, 1);
                if (plen == 4)
                  _intraIns = Math.min(intraIns, 1);
              }
            } else {
              _intraSlice = intraSlice;
              _intraIns = intraIns, _intraSub = intraSub, _intraTrn = intraTrn, _intraDel = intraDel;
            }
          }
          return {
            intraSlice: _intraSlice,
            intraIns: _intraIns,
            intraSub: _intraSub,
            intraTrn: _intraTrn,
            intraDel: _intraDel
          };
        };
      }
      let withIntraSplit = !!_intraSplit;
      let intraSplit = new RegExp(_intraSplit, "g" + uFlag);
      let interSplit = new RegExp(_interSplit, "g" + uFlag);
      let trimRe = new RegExp("^" + _interSplit + "|" + _interSplit + "$", "g" + uFlag);
      let contrsRe = new RegExp(intraContr, "gi" + uFlag);
      const split = (needle) => {
        let exacts = [];
        needle = needle.replace(EXACTS_RE, (m) => {
          exacts.push(m);
          return EXACT_HERE;
        });
        needle = needle.replace(trimRe, "").toLocaleLowerCase();
        if (withIntraSplit)
          needle = needle.replace(intraSplit, (m) => m[0] + " " + m[1]);
        let j = 0;
        return needle.split(interSplit).filter((t) => t != "").map((v) => v === EXACT_HERE ? exacts[j++] : v);
      };
      const NUM_OR_ALPHA_RE = /[^\d]+|\d+/g;
      const prepQuery = (needle, capt = 0, interOR = false) => {
        let parts = split(needle);
        if (parts.length == 0)
          return [];
        let contrs = Array(parts.length).fill("");
        parts = parts.map((p, pi) => p.replace(contrsRe, (m) => {
          contrs[pi] = m;
          return "";
        }));
        let reTpl;
        if (intraMode == 1) {
          reTpl = parts.map((p, pi) => {
            if (p[0] === '"')
              return escapeRegExp(p.slice(1, -1));
            let reTpl2 = "";
            for (let m of p.matchAll(NUM_OR_ALPHA_RE)) {
              let p2 = m[0];
              let {
                intraSlice: intraSlice2,
                intraIns: intraIns2,
                intraSub: intraSub2,
                intraTrn: intraTrn2,
                intraDel: intraDel2
              } = intraRules(p2);
              if (intraIns2 + intraSub2 + intraTrn2 + intraDel2 == 0)
                reTpl2 += p2 + contrs[pi];
              else {
                let [lftIdx, rgtIdx] = intraSlice2;
                let lftChar = p2.slice(0, lftIdx);
                let rgtChar = p2.slice(rgtIdx);
                let chars = p2.slice(lftIdx, rgtIdx);
                if (intraIns2 == 1 && lftChar.length == 1 && lftChar != chars[0])
                  lftChar += "(?!" + lftChar + ")";
                let numChars = chars.length;
                let variants = [p2];
                if (intraSub2) {
                  for (let i = 0; i < numChars; i++)
                    variants.push(lftChar + chars.slice(0, i) + intraChars + chars.slice(i + 1) + rgtChar);
                }
                if (intraTrn2) {
                  for (let i = 0; i < numChars - 1; i++) {
                    if (chars[i] != chars[i + 1])
                      variants.push(lftChar + chars.slice(0, i) + chars[i + 1] + chars[i] + chars.slice(i + 2) + rgtChar);
                  }
                }
                if (intraDel2) {
                  for (let i = 0; i < numChars; i++)
                    variants.push(lftChar + chars.slice(0, i + 1) + "?" + chars.slice(i + 1) + rgtChar);
                }
                if (intraIns2) {
                  let intraInsTpl = lazyRepeat(intraChars, 1);
                  for (let i = 0; i < numChars; i++)
                    variants.push(lftChar + chars.slice(0, i) + intraInsTpl + chars.slice(i) + rgtChar);
                }
                reTpl2 += "(?:" + variants.join("|") + ")" + contrs[pi];
              }
            }
            return reTpl2;
          });
        } else {
          let intraInsTpl = lazyRepeat(intraChars, intraIns);
          if (capt == 2 && intraIns > 0) {
            intraInsTpl = ")(" + intraInsTpl + ")(";
          }
          reTpl = parts.map((p, pi) => p[0] === '"' ? escapeRegExp(p.slice(1, -1)) : p.split("").map((c, i, chars) => {
            if (intraIns == 1 && i == 0 && chars.length > 1 && c != chars[i + 1])
              c += "(?!" + c + ")";
            return c;
          }).join(intraInsTpl) + contrs[pi]);
        }
        let preTpl = interLft == 2 ? mode2Tpl : "";
        let sufTpl = interRgt == 2 ? mode2Tpl : "";
        let interCharsTpl = sufTpl + lazyRepeat(opts.interChars, opts.interIns) + preTpl;
        if (capt > 0) {
          if (interOR) {
            reTpl = preTpl + "(" + reTpl.join(")" + sufTpl + "|" + preTpl + "(") + ")" + sufTpl;
          } else {
            reTpl = "(" + reTpl.join(")(" + interCharsTpl + ")(") + ")";
            reTpl = "(.??" + preTpl + ")" + reTpl + "(" + sufTpl + ".*)";
          }
        } else {
          reTpl = reTpl.join(interCharsTpl);
          reTpl = preTpl + reTpl + sufTpl;
        }
        return [new RegExp(reTpl, "i" + uFlag), parts, contrs];
      };
      const filter = (haystack, needle, idxs) => {
        let [query] = prepQuery(needle);
        if (query == null)
          return null;
        let out = [];
        if (idxs != null) {
          for (let i = 0; i < idxs.length; i++) {
            let idx = idxs[i];
            query.test(haystack[idx]) && out.push(idx);
          }
        } else {
          for (let i = 0; i < haystack.length; i++)
            query.test(haystack[i]) && out.push(i);
        }
        return out;
      };
      let withIntraBound = !!_intraBound;
      let interBound = new RegExp(_interSplit, uFlag);
      let intraBound = new RegExp(_intraBound, uFlag);
      const info = (idxs, haystack, needle) => {
        let [query, parts, contrs] = prepQuery(needle, 1);
        let [queryR] = prepQuery(needle, 2);
        let partsLen = parts.length;
        let len = idxs.length;
        let field = Array(len).fill(0);
        let info2 = {
          // idx in haystack
          idx: Array(len),
          // start of match
          start: field.slice(),
          // length of match
          //	span: field.slice(),
          // contiguous chars matched
          chars: field.slice(),
          // contiguous (no fuzz) and bounded terms (intra=0, lft2/1, rgt2/1)
          // excludes terms that are contiguous but have < 2 bounds (substrings)
          terms: field.slice(),
          // cumulative length of unmatched chars (fuzz) within span
          interIns: field.slice(),
          // between terms
          intraIns: field.slice(),
          // within terms
          // interLft/interRgt counters
          interLft2: field.slice(),
          interRgt2: field.slice(),
          interLft1: field.slice(),
          interRgt1: field.slice(),
          ranges: Array(len)
        };
        let mayDiscard = interLft == 1 || interRgt == 1;
        let ii = 0;
        for (let i = 0; i < idxs.length; i++) {
          let mhstr = haystack[idxs[i]];
          let m = mhstr.match(query);
          let start = m.index + m[1].length;
          let idxAcc = start;
          let disc = false;
          let lft2 = 0;
          let lft1 = 0;
          let rgt2 = 0;
          let rgt1 = 0;
          let chars = 0;
          let terms = 0;
          let inter = 0;
          let intra = 0;
          let refine = [];
          for (let j = 0, k = 2; j < partsLen; j++, k += 2) {
            let group = m[k].toLocaleLowerCase();
            let part = parts[j];
            let term = part[0] == '"' ? part.slice(1, -1) : part + contrs[j];
            let termLen = term.length;
            let groupLen = group.length;
            let fullMatch = group == term;
            if (!fullMatch && m[k + 1].length >= termLen) {
              let idxOf = m[k + 1].toLocaleLowerCase().indexOf(term);
              if (idxOf > -1) {
                refine.push(idxAcc, groupLen, idxOf, termLen);
                idxAcc += refineMatch(m, k, idxOf, termLen);
                group = term;
                groupLen = termLen;
                fullMatch = true;
                if (j == 0)
                  start = idxAcc;
              }
            }
            if (mayDiscard || fullMatch) {
              let lftCharIdx = idxAcc - 1;
              let rgtCharIdx = idxAcc + groupLen;
              let isPre = false;
              let isSuf = false;
              if (lftCharIdx == -1 || interBound.test(mhstr[lftCharIdx])) {
                fullMatch && lft2++;
                isPre = true;
              } else {
                if (interLft == 2) {
                  disc = true;
                  break;
                }
                if (withIntraBound && intraBound.test(mhstr[lftCharIdx] + mhstr[lftCharIdx + 1])) {
                  fullMatch && lft1++;
                  isPre = true;
                } else {
                  if (interLft == 1) {
                    let junk = m[k + 1];
                    let junkIdx = idxAcc + groupLen;
                    if (junk.length >= termLen) {
                      let idxOf = 0;
                      let found = false;
                      let re = new RegExp(term, "ig" + uFlag);
                      let m2;
                      while (m2 = re.exec(junk)) {
                        idxOf = m2.index;
                        let charIdx = junkIdx + idxOf;
                        let lftCharIdx2 = charIdx - 1;
                        if (lftCharIdx2 == -1 || interBound.test(mhstr[lftCharIdx2])) {
                          lft2++;
                          found = true;
                          break;
                        } else if (intraBound.test(mhstr[lftCharIdx2] + mhstr[charIdx])) {
                          lft1++;
                          found = true;
                          break;
                        }
                      }
                      if (found) {
                        isPre = true;
                        refine.push(idxAcc, groupLen, idxOf, termLen);
                        idxAcc += refineMatch(m, k, idxOf, termLen);
                        group = term;
                        groupLen = termLen;
                        fullMatch = true;
                        if (j == 0)
                          start = idxAcc;
                      }
                    }
                    if (!isPre) {
                      disc = true;
                      break;
                    }
                  }
                }
              }
              if (rgtCharIdx == mhstr.length || interBound.test(mhstr[rgtCharIdx])) {
                fullMatch && rgt2++;
                isSuf = true;
              } else {
                if (interRgt == 2) {
                  disc = true;
                  break;
                }
                if (withIntraBound && intraBound.test(mhstr[rgtCharIdx - 1] + mhstr[rgtCharIdx])) {
                  fullMatch && rgt1++;
                  isSuf = true;
                } else {
                  if (interRgt == 1) {
                    disc = true;
                    break;
                  }
                }
              }
              if (fullMatch) {
                chars += termLen;
                if (isPre && isSuf)
                  terms++;
              }
            }
            if (groupLen > termLen)
              intra += groupLen - termLen;
            if (j > 0)
              inter += m[k - 1].length;
            if (!opts.intraFilt(term, group, idxAcc)) {
              disc = true;
              break;
            }
            if (j < partsLen - 1)
              idxAcc += groupLen + m[k + 1].length;
          }
          if (!disc) {
            info2.idx[ii] = idxs[i];
            info2.interLft2[ii] = lft2;
            info2.interLft1[ii] = lft1;
            info2.interRgt2[ii] = rgt2;
            info2.interRgt1[ii] = rgt1;
            info2.chars[ii] = chars;
            info2.terms[ii] = terms;
            info2.interIns[ii] = inter;
            info2.intraIns[ii] = intra;
            info2.start[ii] = start;
            let m2 = mhstr.match(queryR);
            let idxAcc2 = m2.index + m2[1].length;
            let refLen = refine.length;
            let ri = refLen > 0 ? 0 : Infinity;
            let lastRi = refLen - 4;
            for (let i2 = 2; i2 < m2.length; ) {
              let len2 = m2[i2].length;
              if (ri <= lastRi && refine[ri] == idxAcc2) {
                let groupLen = refine[ri + 1];
                let idxOf = refine[ri + 2];
                let termLen = refine[ri + 3];
                let j = i2;
                let v = "";
                for (let _len = 0; _len < groupLen; j++) {
                  v += m2[j];
                  _len += m2[j].length;
                }
                m2.splice(i2, j - i2, v);
                idxAcc2 += refineMatch(m2, i2, idxOf, termLen);
                ri += 4;
              } else {
                idxAcc2 += len2;
                i2++;
              }
            }
            idxAcc2 = m2.index + m2[1].length;
            let ranges = info2.ranges[ii] = [];
            let from = idxAcc2;
            let to = idxAcc2;
            for (let i2 = 2; i2 < m2.length; i2++) {
              let len2 = m2[i2].length;
              idxAcc2 += len2;
              if (i2 % 2 == 0)
                to = idxAcc2;
              else if (len2 > 0) {
                ranges.push(from, to);
                from = to = idxAcc2;
              }
            }
            if (to > from)
              ranges.push(from, to);
            ii++;
          }
        }
        if (ii < idxs.length) {
          for (let k in info2)
            info2[k] = info2[k].slice(0, ii);
        }
        return info2;
      };
      const refineMatch = (m, k, idxInNext, termLen) => {
        let prepend = m[k] + m[k + 1].slice(0, idxInNext);
        m[k - 1] += prepend;
        m[k] = m[k + 1].slice(idxInNext, idxInNext + termLen);
        m[k + 1] = m[k + 1].slice(idxInNext + termLen);
        return prepend.length;
      };
      const OOO_TERMS_LIMIT = 5;
      const _search = (haystack, needle, outOfOrder, infoThresh = 1e3, preFiltered) => {
        var _a2;
        outOfOrder = !outOfOrder ? 0 : outOfOrder === true ? OOO_TERMS_LIMIT : outOfOrder;
        let needles = null;
        let matches = null;
        let negs = [];
        needle = needle.replace(NEGS_RE, (m) => {
          let neg = m.trim().slice(1);
          if (neg[0] === '"')
            neg = escapeRegExp(neg.slice(1, -1));
          negs.push(neg);
          return "";
        });
        let terms = split(needle);
        let negsRe;
        if (negs.length > 0) {
          negsRe = new RegExp(negs.join("|"), "i" + uFlag);
          if (terms.length == 0) {
            let idxs = [];
            for (let i = 0; i < haystack.length; i++) {
              if (!negsRe.test(haystack[i]))
                idxs.push(i);
            }
            return [idxs, null, null];
          }
        } else {
          if (terms.length == 0)
            return [null, null, null];
        }
        if (outOfOrder > 0) {
          let terms2 = split(needle);
          if (terms2.length > 1) {
            let terms22 = terms2.slice().sort((a, b) => b.length - a.length);
            for (let ti = 0; ti < terms22.length; ti++) {
              if ((preFiltered == null ? void 0 : preFiltered.length) == 0)
                return [[], null, null];
              preFiltered = filter(haystack, terms22[ti], preFiltered);
            }
            if (terms2.length > outOfOrder)
              return [preFiltered, null, null];
            needles = permute(terms2).map((perm) => perm.join(" "));
            matches = [];
            let matchedIdxs = /* @__PURE__ */ new Set();
            for (let ni = 0; ni < needles.length; ni++) {
              if (matchedIdxs.size < preFiltered.length) {
                let preFiltered2 = preFiltered.filter((idx) => !matchedIdxs.has(idx));
                let matched = filter(haystack, needles[ni], preFiltered2);
                for (let j = 0; j < matched.length; j++)
                  matchedIdxs.add(matched[j]);
                matches.push(matched);
              } else
                matches.push([]);
            }
          }
        }
        if (needles == null) {
          needles = [needle];
          matches = [(preFiltered == null ? void 0 : preFiltered.length) > 0 ? preFiltered : filter(haystack, needle)];
        }
        let retInfo = null;
        let retOrder = null;
        if (negs.length > 0)
          matches = matches.map((idxs) => idxs.filter((idx) => !negsRe.test(haystack[idx])));
        let matchCount = matches.reduce((acc, idxs) => acc + idxs.length, 0);
        if (matchCount <= infoThresh) {
          retInfo = {};
          retOrder = [];
          for (let ni = 0; ni < matches.length; ni++) {
            let idxs = matches[ni];
            if (idxs == null || idxs.length == 0)
              continue;
            let needle2 = needles[ni];
            let _info = info(idxs, haystack, needle2);
            let order = opts.sort(_info, haystack, needle2);
            if (ni > 0) {
              for (let i = 0; i < order.length; i++)
                order[i] += retOrder.length;
            }
            for (let k in _info)
              retInfo[k] = ((_a2 = retInfo[k]) != null ? _a2 : []).concat(_info[k]);
            retOrder = retOrder.concat(order);
          }
        }
        return [
          [].concat(...matches),
          retInfo,
          retOrder
        ];
      };
      return {
        search: (...args) => {
          let out = _search(...args);
          return out;
        },
        split,
        filter,
        info,
        sort: opts.sort
      };
    }
    var latinize = (() => {
      let accents = {
        A: "\xC1\xC0\xC3\xC2\xC4\u0104",
        a: "\xE1\xE0\xE3\xE2\xE4\u0105",
        E: "\xC9\xC8\xCA\xCB\u0116",
        e: "\xE9\xE8\xEA\xEB\u0119",
        I: "\xCD\xCC\xCE\xCF\u012E",
        i: "\xED\xEC\xEE\xEF\u012F",
        O: "\xD3\xD2\xD4\xD5\xD6",
        o: "\xF3\xF2\xF4\xF5\xF6",
        U: "\xDA\xD9\xDB\xDC\u016A\u0172",
        u: "\xFA\xF9\xFB\xFC\u016B\u0173",
        C: "\xC7\u010C\u0106",
        c: "\xE7\u010D\u0107",
        L: "\u0141",
        l: "\u0142",
        N: "\xD1\u0143",
        n: "\xF1\u0144",
        S: "\u0160\u015A",
        s: "\u0161\u015B",
        Z: "\u017B\u0179",
        z: "\u017C\u017A"
      };
      let accentsMap = /* @__PURE__ */ new Map();
      let accentsTpl = "";
      for (let r in accents) {
        accents[r].split("").forEach((a) => {
          accentsTpl += a;
          accentsMap.set(a, r);
        });
      }
      let accentsRe = new RegExp(`[${accentsTpl}]`, "g");
      let replacer = (m) => accentsMap.get(m);
      return (strings) => {
        if (typeof strings == "string")
          return strings.replace(accentsRe, replacer);
        let out = Array(strings.length);
        for (let i = 0; i < strings.length; i++)
          out[i] = strings[i].replace(accentsRe, replacer);
        return out;
      };
    })();
    function permute(arr) {
      arr = arr.slice();
      let length = arr.length, result = [arr.slice()], c = new Array(length).fill(0), i = 1, k, p;
      while (i < length) {
        if (c[i] < i) {
          k = i % 2 && c[i];
          p = arr[i];
          arr[i] = arr[k];
          arr[k] = p;
          ++c[i];
          i = 1;
          result.push(arr.slice());
        } else {
          c[i] = 0;
          ++i;
        }
      }
      return result;
    }
    var _mark = (part, matched) => matched ? `<mark>${part}</mark>` : part;
    var _append = (acc, part) => acc + part;
    function highlight(str, ranges, mark = _mark, accum = "", append = _append) {
      var _a, _b, _c, _d;
      accum = (_a = append(accum, mark(str.substring(0, ranges[0]), false))) != null ? _a : accum;
      for (let i = 0; i < ranges.length; i += 2) {
        let fr = ranges[i];
        let to = ranges[i + 1];
        accum = (_b = append(accum, mark(str.substring(fr, to), true))) != null ? _b : accum;
        if (i < ranges.length - 3)
          accum = (_c = append(accum, mark(str.substring(ranges[i + 1], ranges[i + 2]), false))) != null ? _c : accum;
      }
      accum = (_d = append(accum, mark(str.substring(ranges[ranges.length - 1]), false))) != null ? _d : accum;
      return accum;
    }
    uFuzzy2.latinize = latinize;
    uFuzzy2.permute = (arr) => {
      let idxs = permute([...Array(arr.length).keys()]).sort((a, b) => {
        for (let i = 0; i < a.length; i++) {
          if (a[i] != b[i])
            return a[i] - b[i];
        }
        return 0;
      });
      return idxs.map((pi) => pi.map((i) => arr[i]));
    };
    uFuzzy2.highlight = highlight;
    module2.exports = uFuzzy2;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CalloutSuggestions
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// node_modules/.pnpm/obsidian-callout-manager@1.0.2-alpha1_obsidian-undocumented@0.1.3_obsidian@1.5.7-1_@codemirro_zzpe3qzwug6aru6edqqkwqbcm4/node_modules/obsidian-callout-manager/dist/api-esm.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var PLUGIN_ID = "callout-manager";
var PLUGIN_API_VERSION = "v1";
function getApi(plugin) {
  var _a;
  return __awaiter(this, void 0, void 0, function* () {
    const app = (_a = plugin === null || plugin === void 0 ? void 0 : plugin.app) !== null && _a !== void 0 ? _a : globalThis.app;
    const { plugins } = app;
    if (!plugins.enabledPlugins.has(PLUGIN_ID)) {
      return void 0;
    }
    const calloutManagerInstance = yield new Promise((resolve, reject) => {
      const instance = plugins.plugins[PLUGIN_ID];
      if (instance !== void 0) {
        return resolve(instance);
      }
      const interval = setInterval(() => {
        const instance2 = plugins.plugins[PLUGIN_ID];
        if (instance2 !== void 0) {
          clearInterval(interval);
          resolve(instance2);
        }
      }, 10);
    });
    return calloutManagerInstance.newApiHandle(PLUGIN_API_VERSION, plugin, () => {
      calloutManagerInstance.destroyApiHandle(PLUGIN_API_VERSION, plugin);
    });
  });
}
function isInstalled(app) {
  const appWithPlugins = app !== null && app !== void 0 ? app : globalThis.app;
  return appWithPlugins.plugins.enabledPlugins.has(PLUGIN_ID);
}

// src/utils/parser.ts
var CalloutParser = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  getCallout(selectedText) {
    const allCallouts = this.plugin.calloutManager.getCallouts();
    let result = allCallouts.filter((val) => val.id === selectedText)[0];
    return result;
  }
  formatCallout(callout, format) {
    if (callout.id === "none") {
      return "> ";
    }
    let calloutStr = callout.id;
    switch (this.plugin.settings.calloutCase) {
      case "lower": {
        calloutStr = calloutStr.toLowerCase();
        break;
      }
      case "title": {
        calloutStr = calloutStr.toLowerCase().split(" ").map((word) => {
          return word.charAt(0).toUpperCase() + word.slice(1);
        }).join(" ");
        break;
      }
      case "upper": {
        calloutStr = calloutStr.toUpperCase();
        break;
      }
    }
    let prefix;
    let suffix;
    switch (format) {
      case "default":
        prefix = "> [!";
        suffix = "]";
        return prefix + calloutStr + suffix;
      case "admonition":
        prefix = "```";
        suffix = "\n```";
        return prefix + calloutStr + suffix;
    }
  }
  getFormattedCallout(selectedText, format) {
    let callout = this.getCallout(selectedText) || { id: "none" };
    let formattedString = this.formatCallout(callout, format);
    return {
      callout,
      formattedString
    };
  }
};

// src/suggest/callout-suggest.ts
var import_obsidian = require("obsidian");
var uFuzzy = require_uFuzzy_cjs();
var CalloutSuggest = class extends import_obsidian.EditorSuggest {
  constructor(app, plugin) {
    super(app);
    this.app = app;
    this.plugin = plugin;
  }
  getSuggestions(context) {
    const suggestions = this.getCalloutSuggestions(context);
    if (suggestions.length) {
      return suggestions;
    }
    return [{ icon: "none", color: "none", label: "No matches" }];
  }
  getCalloutSuggestions(context) {
    let needle = context.query;
    let callouts = this.plugin.calloutManager.getCallouts();
    let haystack = (callouts == null ? void 0 : callouts.map((callout) => callout.id)) || [needle];
    let uf = new uFuzzy({});
    let idxs = uf.filter(haystack, needle);
    let result = [];
    if (idxs != null && idxs.length > 0) {
      let infoThresh = 100;
      if (idxs.length <= infoThresh) {
        let info = uf.info(idxs, haystack, needle);
        let order = uf.sort(info, haystack, needle);
        for (let i = 0; i < order.length; i++) {
          result.push(haystack[info.idx[order[i]]]);
        }
      } else {
        for (let i = 0; i < idxs.length; i++) {
          result.push(haystack[idxs[i]]);
        }
      }
    }
    let output;
    if (needle.length > 1) {
      output = callouts.filter((c) => result.includes(c.id)).map((val) => ({ icon: `${val.icon}`, label: `${val.id}`, color: `${val.color}` }));
    } else {
      output = callouts.map((val) => ({ icon: `${val.icon}`, label: `${val.id}`, color: `${val.color}` }));
    }
    return output;
  }
  renderSuggestion(callout, el) {
    const calloutContainerEl = el.createEl("div");
    calloutContainerEl.classList.add("calloutmanager-preview-container");
    calloutContainerEl.setAttribute("data-callout-manager-callout", callout.label);
    const { icon, color, label } = callout;
    new CalloutPreviewComponent(calloutContainerEl, {
      label,
      icon,
      color: color != null ? color : void 0
    });
  }
  selectSuggestion(value, _evt) {
    const { editor } = this.context;
    let calloutStr = "";
    let callout = this.plugin.parseCallout(value.label);
    calloutStr = callout.formattedString;
    editor.replaceRange(calloutStr, this.context.start, this.context.end);
  }
  onTrigger(cursor, editor, _file) {
    var _a;
    const triggerPhrase = this.plugin.settings.autocompleteTriggerPhrase;
    const startPos = ((_a = this.context) == null ? void 0 : _a.start) || {
      line: cursor.line,
      ch: cursor.ch - triggerPhrase.length - 1
    };
    if (!editor.getRange(startPos, cursor).startsWith(">" + triggerPhrase)) {
      return null;
    }
    return {
      start: startPos,
      end: cursor,
      query: editor.getRange(startPos, cursor).substring(triggerPhrase.length)
    };
  }
};
var CalloutPreviewComponent = class extends import_obsidian.Component {
  constructor(containerEl, options) {
    super();
    const { icon, label } = options;
    const frag = document.createDocumentFragment();
    const calloutEl = this.calloutEl = frag.createDiv({ cls: ["callout", "calloutmanager-preview"] });
    const titleElContainer = calloutEl.createDiv({ cls: "callout-title" });
    this.iconEl = titleElContainer.createDiv({ cls: "callout-icon" });
    const titleEl = this.titleEl = titleElContainer.createDiv({ cls: "callout-title-inner" });
    titleEl.textContent = label;
    this.setIcon(icon);
    this.setCalloutID(label);
    CalloutPreviewComponent.prototype.attachTo.call(this, containerEl);
  }
  /**
   * Changes the callout ID.
   * This will *not* change the appearance of the preview.
   *
   * @param id The new ID to use.
   */
  setCalloutID(id) {
    const { calloutEl } = this;
    calloutEl.setAttribute("data-callout", id);
    return this;
  }
  /**
   * Changes the callout icon.
   *
   * @param icon The ID of the new icon to use.
   */
  setIcon(icon) {
    const { iconEl } = this;
    iconEl.empty();
    const iconSvg = (0, import_obsidian.getIcon)(icon);
    if (iconSvg != null) {
      this.iconEl.appendChild(iconSvg);
    }
    return this;
  }
  /**
   * Attaches the callout preview to a DOM element.
   * This places it at the end of the element.
   *
   * @param containerEl The container to attach to.
   */
  attachTo(containerEl) {
    containerEl.appendChild(this.calloutEl);
    return this;
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  calloutFormat: "default",
  autocompleteTriggerPhrase: "!",
  calloutCase: "lower"
};
var CalloutSuggestions = class extends import_obsidian2.Plugin {
  async onload() {
    if (!isInstalled()) {
      console.log("Callout Suggestions depends on Callout Manager. Install and enable it from community plugins before enabling this.");
      new import_obsidian2.Notice("Callout Suggestions depends on Callout Manager. Install and enable it from community plugins before enablng this.");
      this.unload();
      return;
    }
    await this.loadSettings();
    this.parser = new CalloutParser(this);
    this.addSettingTab(new CalloutHelperSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(async () => {
      this.calloutManager = await getApi(this);
      this.registerEditorSuggest(new CalloutSuggest(this.app, this));
    });
  }
  onunload() {
    console.log("Unloading Callout Helper plugin.");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /*
    @param inputString: A string that contains a callout name to fuzzy match
    @returns CHResult: An object containing the things you need
  */
  parseCallout(inputString) {
    const format = this.settings.calloutFormat;
    const callout = this.parser.getFormattedCallout(inputString, format);
    if (callout.formattedString === "Invalid callout") {
      console.debug("Input callout " + inputString + " cannot be parsed by CalloutHelper");
    }
    return callout;
  }
};
var CalloutHelperSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Callout syntax").setDesc("Which callout syntax do you use?").addDropdown((dropDown) => {
      dropDown.addOption("default", "Obsidian Syntax   > [!name]");
      dropDown.addOption("admonition", "Admonition Syntax   ```name");
      dropDown.setValue(this.plugin.settings.calloutFormat);
      dropDown.onChange(async (value) => {
        this.plugin.settings.calloutFormat = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Completion trigger character").setDesc("Which character should trigger the in-line suggestions?").addText((text) => {
      text.setPlaceholder("Completion trigger character is empty").setValue(this.plugin.settings.autocompleteTriggerPhrase).onChange(async (value) => {
        this.plugin.settings.autocompleteTriggerPhrase = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Case for inserted callout").setDesc("Select the case for the inserted callout").addDropdown((dropDown) => {
      dropDown.addOption("lower", "lowercase");
      dropDown.addOption("title", "Titlecase");
      dropDown.addOption("upper", "UPPERCASE");
      dropDown.setValue(this.plugin.settings.calloutCase);
      dropDown.onChange(async (value) => {
        this.plugin.settings.calloutCase = value;
        await this.plugin.saveSettings();
      });
    });
  }
};


/* nosourcemap */