/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MorgenPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// extension.ts
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var DEFAULT_SETTINGS = {
  decorateIDs: "show"
};
var IDWidget = class extends import_view.WidgetType {
  constructor(id) {
    super();
    this.id = id;
  }
  toDOM() {
    const wrap = document.createElement("span");
    wrap.setAttribute("aria-label", `ID: ${this.id}`);
    const box = wrap.appendChild(document.createElement("span"));
    box.innerText = "\u25AB\uFE0F";
    box.style.opacity = "0.7";
    box.style.filter = "grayscale()";
    return wrap;
  }
};
var settingsFacet = import_state.Facet.define({
  combine: (allSettings) => {
    var _a;
    return (_a = allSettings[0]) != null ? _a : DEFAULT_SETTINGS;
  }
});
function hideIdsDeco(view) {
  return new import_view.MatchDecorator({
    regexp: /ðŸ†” ([A-Za-z0-9]+)/g,
    decoration: (match) => {
      return import_view.Decoration.replace({
        widget: view.state.facet(settingsFacet).decorateIDs === "hide" ? void 0 : new IDWidget(match[1])
      });
    }
  }).createDeco(view);
}
var hideIDsPlugin = import_view.ViewPlugin.fromClass(
  class {
    constructor(view) {
      this.previousSettingsHash = JSON.stringify(view.state.facet(settingsFacet));
      this.decorations = view.state.facet(settingsFacet).decorateIDs === "show" ? import_state.RangeSet.empty : hideIdsDeco(view);
    }
    update(update) {
      if (update.docChanged || this.previousSettingsHash !== JSON.stringify(update.view.state.facet(settingsFacet))) {
        this.previousSettingsHash = JSON.stringify(update.view.state.facet(settingsFacet));
        this.decorations = update.view.state.facet(settingsFacet).decorateIDs === "show" ? import_state.RangeSet.empty : hideIdsDeco(update.view);
      }
    }
  },
  {
    decorations: (v) => v.decorations,
    provide: (plugin) => import_view.EditorView.atomicRanges.of(
      (view) => {
        var _a;
        return ((_a = view.plugin(plugin)) == null ? void 0 : _a.decorations) || import_view.Decoration.none;
      }
    )
  }
);
function hideIDsExtension(settings = DEFAULT_SETTINGS) {
  return [settingsFacet.of(settings), hideIDsPlugin];
}

// postProcessor.ts
var taskIdRegex = /[a-zA-Z0-9-_]+/;
var IDRegex = new RegExp("\u{1F194} *(" + taskIdRegex.source + ")", "iu");
var MorgenTasksPostProcessor = class {
  constructor(settings) {
    this.settings = settings;
  }
  postProcess(element) {
    var _a, _b, _c, _d;
    if (this.settings.decorateIDs === "show")
      return;
    const getReplacement = (id) => {
      switch (this.settings.decorateIDs) {
        case "replace_with_emoji":
          return element.createSpan({
            text: "\u25AB\uFE0F",
            title: id
          });
        default:
          return null;
      }
    };
    const elementsWithIds = element.findAll("p, span, li").map((container) => [
      container,
      container.innerText.match(IDRegex)
    ]).filter((args) => args[1]);
    for (const [el, match] of elementsWithIds) {
      if (
        // Task is rendered by the Tasks plugin by a query block. If
        // the ID isn't the last item in the text, it will sometimes
        // fail to give the ID its own span (which would normally be
        // replaced by style.css). This is a work-around for that.
        ((_c = (_b = (_a = el.parentElement) == null ? void 0 : _a.parentElement) == null ? void 0 : _b.parentElement) == null ? void 0 : _c.hasClass("tasks-list-text")) || // Task is rendered inline by the Kanban plugin, which means
        // the ID is present in an element containing the rest of the
        // task description.
        ((_d = el.parentElement) == null ? void 0 : _d.hasClass("kanban-plugin__markdown-preview-view"))
      ) {
        const [before, after] = el.innerText.split(match[0]);
        const replacement = getReplacement(match[0]);
        const replacementElement = element.createEl(
          el.tagName
        );
        replacementElement.className = el.className;
        replacementElement.appendText(before);
        if (replacement) {
          replacementElement.appendChild(replacement);
        }
        replacementElement.appendText(after);
        el.replaceWith(replacementElement);
      }
    }
  }
};

// main.ts
var DEFAULT_SETTINGS2 = {
  decorateIDs: "show"
};
var MorgenPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEditorExtension(hideIDsExtension(this.settings));
    this.postProcessor = new MorgenTasksPostProcessor(this.settings);
    this.registerMarkdownPostProcessor((element) => {
      try {
        this.postProcessor.postProcess(element);
      } catch (e) {
        console.error("MorgenPlugin: Error whilst post processing markdown", e);
      }
    });
    this.addSettingTab(new MorgenSettingTab(this.app, this));
  }
  onunload() {
  }
  async updateSettings(update) {
    Object.assign(this.settings, update);
    document.documentElement.style.setProperty(
      "--morgen-tasks-decorate-ids",
      this.settings.decorateIDs
    );
    return this.saveSettings();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS2, await this.loadData());
    document.documentElement.style.setProperty(
      "--morgen-tasks-decorate-ids",
      this.settings.decorateIDs
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MorgenSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Enabled task ID hiding").setDesc("Hide all IDs in your note to reduce noise").addDropdown((component) => {
      component.addOptions({
        replace_with_emoji: "Replace with emoji",
        hide: "Hide completely",
        show: "Show IDs"
      }).setValue(this.plugin.settings.decorateIDs).onChange(
        (value) => this.plugin.updateSettings({ decorateIDs: value })
      );
    });
  }
};

/* nosourcemap */