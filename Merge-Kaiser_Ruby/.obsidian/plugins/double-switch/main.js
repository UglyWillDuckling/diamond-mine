/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DoubleSwitchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var NOSWITCH = "Don't switch";
var DEFAULT_SETTINGS = {
  myDarkModeThemeName: NOSWITCH,
  myLightModeThemeName: NOSWITCH
};
var DoubleSwitchPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.darkModeBefore = document.body.hasClass("theme-dark");
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new MySettingTab(this.app, this));
    this.registerEvent(this.app.workspace.on(
      "css-change",
      () => {
        const darkModeNow = document.body.hasClass("theme-dark");
        if (this.darkModeBefore != darkModeNow) {
          this.darkModeBefore = darkModeNow;
          if (darkModeNow) {
            this.setTheme(this.settings.myDarkModeThemeName);
          } else {
            this.setTheme(this.settings.myLightModeThemeName);
          }
        }
      }
    ));
  }
  setTheme(themeName) {
    if (themeName !== NOSWITCH) {
      this.app.customCss.setTheme(themeName);
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.DEFAULT_THEME_KEY = "";
    this.DEFAULT_THEME_TEXT = "Default";
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(this.containerEl).setName("Theme to use with light mode").setDesc("Pick from installed themes").addDropdown(async (dropdown) => {
      dropdown.addOption(NOSWITCH, NOSWITCH);
      for (const key of Object.values(this.getThemes())) {
        dropdown.addOption(key, this.getThemeNames(key));
      }
      dropdown.setValue(this.plugin.settings.myLightModeThemeName);
      dropdown.onChange(async (value) => {
        this.plugin.settings.myLightModeThemeName = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(this.containerEl).setName("Theme to use with dark mode").setDesc("Pick from installed themes").addDropdown(async (dropdown) => {
      dropdown.addOption(NOSWITCH, NOSWITCH);
      for (const key of Object.values(this.getThemes())) {
        dropdown.addOption(key, this.getThemeNames(key));
      }
      dropdown.setValue(this.plugin.settings.myDarkModeThemeName);
      dropdown.onChange(async (value) => {
        this.plugin.settings.myDarkModeThemeName = value;
        await this.plugin.saveSettings();
      });
    });
  }
  getThemes() {
    return [this.DEFAULT_THEME_KEY, ...Object.keys(this.app.customCss.themes), ...this.app.customCss.oldThemes];
  }
  getThemeNames(item) {
    if (item === this.DEFAULT_THEME_KEY) {
      return this.DEFAULT_THEME_TEXT;
    } else {
      return item;
    }
  }
};


/* nosourcemap */