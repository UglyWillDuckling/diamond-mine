/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JiraLinkerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// Modals/JiraInstanceSuggestModal.ts
var import_obsidian = require("obsidian");
var JiraInstanceSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, items, onSubmit) {
    super(app);
    /**
     * @private
     */
    this.untitledInstanceCounter = 0;
    this.items = items;
    this.onSubmit = onSubmit;
    this.inputEl.addEventListener("keydown", () => {
      this.untitledInstanceCounter = 0;
    });
  }
  getSuggestions(query) {
    const newItems = this.items.map((x) => {
      return {
        IsDefault: x.IsDefault,
        Url: x.Url,
        Title: x.Title === "" ? `Instance ${this.untitledInstanceCounter++}` : x.Title
      };
    });
    return newItems.filter(
      (x) => x.Title.toLowerCase().contains(query.toLowerCase()) || x.Url.toLowerCase().contains(query.toLowerCase())
    );
  }
  renderSuggestion(value, el) {
    const div = el.createDiv();
    div.createEl("h1", {
      text: value.Title
    }).className = "jira_instance_title";
    div.createEl("p", {
      text: value.Url
    }).className = "jira_instance_url";
  }
  onChooseSuggestion(item, evt) {
    this.onSubmit(item);
    return item;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// Modals/JiraIssueInputModal.ts
var import_obsidian2 = require("obsidian");
var JiraIssueInputModal = class extends import_obsidian2.Modal {
  constructor(app, insert_newline_on_return, onSubmit) {
    super(app);
    this.title = "Enter your Jira issue";
    this.description = "Type in a jira issue number";
    this.insert_newline_on_return = insert_newline_on_return;
    this.onSubmit = onSubmit;
    this.containerEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        if (this.result !== void 0 && this.result !== "") {
          if (!insert_newline_on_return) {
            e.preventDefault();
          }
          this.close();
          this.onSubmit(this.result);
        }
      } else if (e.key == "Escape") {
        this.close();
      }
    });
  }
  setTitle(newTitle) {
    this.title = newTitle;
    return this;
  }
  setDescription(newDescription) {
    this.description = newDescription;
    return this;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: this.title });
    contentEl.createEl("p", { text: this.description });
    new import_obsidian2.Setting(contentEl).setName("Jira Issue").addText((text) => text.onChange((value) => {
      this.result = value;
    }));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Link Issue").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  /**
   * @deprecated In version 1.0.X, this only supported one url,
   * instead, use the jira_instance_urls array instead
   * Refer to deprecation-notes for more info
   */
  jira_instance_url: "",
  jira_instance_urls: [],
  local_issue_path: "",
  local_issue_info_file: "_Info",
  input_modal_settings: {
    insert_newline_after_return: true
  },
  issue_creation_settings: {
    create_issue_inside_project_folder: true
  }
};
var JiraLinkerPlugin = class extends import_obsidian3.Plugin {
  /**
   * Handling for if user used older versions containing only one url instance
   * this will load it to the array list.
   * 
   * See deprecation-notes for more info
   * 
   * @private
   */
  async fixV1_2_0() {
    if (this.settings.jira_instance_url !== "") {
      this.settings.jira_instance_urls.push({ IsDefault: false, Title: "", Url: this.settings.jira_instance_url });
      this.settings.jira_instance_url = "";
      await this.saveSettings();
    }
  }
  /**
   * This contains migrations of data structures to allow older
   * versions to be upgraded to the current feature set
   * 
   * @private
   */
  async applyVersionChanges() {
    await this.fixV1_2_0();
  }
  async onload() {
    await this.loadSettings();
    await this.applyVersionChanges();
    this.addCommand({
      id: "cmd-link-jira-issue",
      name: "Link Jira issue",
      editorCallback: async (editor, view) => {
        if (this.settings.jira_instance_urls.length > 1) {
          const suggestor = new JiraInstanceSuggestModal(this.app, this.settings.jira_instance_urls, (instance) => {
            this.insertJiraLink(instance.Url, editor);
          });
          suggestor.setPlaceholder("Select a Jira instance");
          suggestor.open();
        } else {
          const instanceUrl = this.settings.jira_instance_urls.length == 0 ? "" : this.settings.jira_instance_urls[0].Url;
          this.insertJiraLink(instanceUrl, editor);
        }
      }
    });
    this.addCommand({
      id: "cmd-link-jira-issue-default-instance",
      name: "Link Jira issue (default instance)",
      editorCallback: async (editor, view) => {
        var _a;
        if (this.settings.jira_instance_urls.length == 0) {
          this.insertJiraLink("", editor);
        } else {
          let foundIndex = -1;
          const defaultInstance = (_a = this.settings.jira_instance_urls.find((x, index, instance) => {
            const condition = x.IsDefault;
            if (condition) {
              foundIndex = index;
            }
            return condition;
          })) != null ? _a : this.settings.jira_instance_urls[0];
          if (foundIndex == -1) {
            new import_obsidian3.Notice(`No default Jira Instance configured, using the first instance available: ${this.settings.jira_instance_urls[0].Title !== "" ? this.settings.jira_instance_urls[0].Title : this.settings.jira_instance_urls[0].Url}`);
          }
          this.insertJiraLink(defaultInstance.Url, editor);
        }
      }
    });
    this.addCommand({
      id: "cmd-link-jira-issue-info",
      name: "Link Jira issue to info",
      editorCallback: (editor, view) => {
        const local_issue_path = this.settings.local_issue_path;
        const local_issue_main_file = this.settings.local_issue_info_file;
        const content = editor.getSelection();
        if (local_issue_path == "") {
          const msg = "The local issue path has not been set in settings";
          new import_obsidian3.Notice(msg);
          return;
        }
        if (local_issue_main_file == "" && this.settings.issue_creation_settings.create_issue_inside_project_folder) {
          const msg = "The local issue main file has not been set in settings";
          new import_obsidian3.Notice(msg);
          return;
        }
        if (content == "") {
          new JiraIssueInputModal(this.app, this.settings.input_modal_settings.insert_newline_after_return, (result) => {
            if (result !== "") {
              const newStr = this.createLocalUri(local_issue_path, result, local_issue_main_file);
              editor.replaceSelection(newStr);
            }
          }).setDescription("Enter an issue number to be constructed into your local issue path").open();
        } else {
          const newStr = this.createLocalUri(local_issue_path, content, local_issue_main_file);
          editor.replaceSelection(newStr);
        }
      }
    });
    this.addSettingTab(new JiraLinkerSettingTab(this.app, this));
  }
  insertJiraLink(jira_url, editor) {
    if (jira_url == "") {
      const msg = "The Jira URL has not been set in settings";
      new import_obsidian3.Notice(msg);
      return;
    }
    const content = editor.getSelection();
    if (content == "") {
      new JiraIssueInputModal(this.app, this.settings.input_modal_settings.insert_newline_after_return, (result) => {
        if (result !== "") {
          const newStr = this.createWebUrl(jira_url, result);
          editor.replaceSelection(newStr);
        }
      }).setDescription("Enter an issue number which will then be appended to your Jira instance url").open();
    } else {
      const newStr = this.createWebUrl(jira_url, content);
      editor.replaceSelection(newStr);
    }
  }
  /**
   * Create a URL for linking to Jira web instance
   * @param {string} url The Jira instance url
   * @param {string} jira_issue The Jira issue number (e.g.: JIRA-123)
   * @returns {string} A fully formed markdown Url representing a Jira with the issue as a label
   */
  createWebUrl(jira_url, jira_issue) {
    return `[${jira_issue}](${jira_url}/browse/${jira_issue})`;
  }
  /**
   * Create a Uri which points to a local file
   * @param {string} local_path The local path for the local issues in obsidian
   * @param {string} jira_issue The Jira issue number (e.g.: JIRA-123)
   * @param {string} main_file_name The name of the main file
   * @returns {string} A fully formed obsidian markdown Uri for referencing an issue
   */
  createLocalUri(local_path, jira_issue, main_file_name) {
    if (this.settings.issue_creation_settings.create_issue_inside_project_folder) {
      return `[[${local_path}/${jira_issue}/${main_file_name}|${jira_issue}]]`;
    } else {
      return `[[${local_path}/${jira_issue}${main_file_name}|${jira_issue}]]`;
    }
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var JiraLinkerSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.add_jira_instance_settings(containerEl);
    this.add_jira_local_issue_settings(containerEl);
    this.add_misc_settings(containerEl);
  }
  add_jira_instance_settings(containerEl) {
    const desc = document.createDocumentFragment();
    const content = document.createElement("div");
    content.innerHTML = `
		<p>The list of domain URLs for your Jira instances</p>
		<p>Denote your default instance by selecting the <strong>Set As Default</strong> button. If <span style="text-decoration: underline;">no default is selected</span>, the <strong>first</strong> instance will be used</p>
		</br>
		<em>Note: A title is optional for your instances, but recommended for organization.</em>
		`;
    desc.append(content);
    new import_obsidian3.Setting(containerEl).setName("Jira Instances").setDesc(desc);
    this.plugin.settings.jira_instance_urls.forEach((url, index) => {
      const s = new import_obsidian3.Setting(containerEl);
      s.nameEl.remove();
      s.descEl.remove();
      if (!this.plugin.settings.jira_instance_urls[index].IsDefault) {
        s.addButton((cb) => {
          cb.setButtonText("Set As Default");
          cb.onClick((cb2) => {
            for (let c = 0; c < this.plugin.settings.jira_instance_urls.length; c++) {
              this.plugin.settings.jira_instance_urls[c].IsDefault = false;
            }
            this.plugin.settings.jira_instance_urls[index].IsDefault = true;
            this.plugin.saveSettings();
            this.display();
          });
        });
      } else {
        s.addButton((cb) => {
          cb.setButtonText("Default");
          cb.buttonEl.className = "assigned-default-button";
          cb.onClick((cb2) => {
            this.plugin.settings.jira_instance_urls[index].IsDefault = false;
            this.plugin.saveSettings();
            this.display();
          });
        });
      }
      s.addText((cb) => {
        cb.setPlaceholder("Add an optional title");
        cb.setValue(this.plugin.settings.jira_instance_urls[index].Title);
        cb.onChange(async (value) => {
          this.plugin.settings.jira_instance_urls[index].Title = value;
          await this.plugin.saveSettings();
        });
      }).addText((cb) => {
        cb.setPlaceholder("Example: https://myinstance.atlassian.net");
        cb.setValue(this.plugin.settings.jira_instance_urls[index].Url);
        cb.onChange(async (value) => {
          if (value.endsWith("/")) {
            value = value.slice(0, -1);
          }
          this.plugin.settings.jira_instance_urls[index].Url = value;
          await this.plugin.saveSettings();
        });
        cb.inputEl.classList.add("setting_jira_instance_url");
      }).addExtraButton((cb) => {
        cb.setIcon("cross").setTooltip("delete instance").onClick(async () => {
          this.plugin.settings.jira_instance_urls.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        });
      });
    });
    new import_obsidian3.Setting(containerEl).addButton((cb) => {
      cb.setButtonText("Add new Jira instance").setCta().onClick(async () => {
        this.plugin.settings.jira_instance_urls.push({
          Title: "",
          IsDefault: false,
          Url: ""
        });
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  add_jira_local_issue_settings(containerEl) {
    new import_obsidian3.Setting(containerEl).setName("Local Issue Path").setDesc("The relative path to your issue folder").addText((text) => text.setPlaceholder("Relative issue path").setValue(this.plugin.settings.local_issue_path).onChange(async (value) => {
      if (value.endsWith("/")) {
        value = value.slice(0, -1);
      }
      this.plugin.settings.local_issue_path = value;
      await this.plugin.saveSettings();
    }));
    const settingMainFileNameDesc = document.createDocumentFragment();
    settingMainFileNameDesc.append(
      'The "Main" file name for linking to local issues (e.g.: ',
      settingMainFileNameDesc.createEl("i", {
        text: "issues/JIRA-123/_Info"
      }),
      ")"
    );
    new import_obsidian3.Setting(containerEl).setName("Local Issue Main File Name").setDesc(settingMainFileNameDesc).addText((text) => text.setPlaceholder("Local Issue Main File").setValue(this.plugin.settings.local_issue_info_file).onChange(async (value) => {
      this.plugin.settings.local_issue_info_file = value;
      await this.plugin.saveSettings();
    }));
  }
  add_misc_settings(containerEl) {
    new import_obsidian3.Setting(containerEl).setName("New Line Insertion").setDesc("Allow New Line After Pressing 'Return' on Jira Issue Insertion").addToggle((newValue) => newValue.setValue(this.plugin.settings.input_modal_settings.insert_newline_after_return).onChange(async (value) => {
      this.plugin.settings.input_modal_settings.insert_newline_after_return = value;
      await this.plugin.saveSettings();
    }));
    const desc = document.createDocumentFragment();
    const content = document.createElement("div");
    content.innerHTML = `
		<p>When linking with a local issue, a project folder with the issue name is created. Otherwise a note will be created instead the Local Issue Path. If disabled, "Local Issue Main File Name" becomes optional and can be left blank</p>
		<p><strong>With</strong> Project Folder: issue/PROJ-123/_Info</p>
		<p><strong>Without</strong> Project Folder: issue/PROJ-123_Info</p>
		`;
    desc.append(content);
    new import_obsidian3.Setting(containerEl).setName("Create Project Folder for Local Issues").setDesc(desc).addToggle(
      (newValue) => newValue.setValue(this.plugin.settings.issue_creation_settings.create_issue_inside_project_folder).onChange(async (value) => {
        this.plugin.settings.issue_creation_settings.create_issue_inside_project_folder = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

/* nosourcemap */